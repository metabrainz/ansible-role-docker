---
name: CI

"on":
  pull_request:
  push:
    branches:
      - "main"
  schedule:
    - cron: "46 14 * * 3"
  workflow_dispatch:

defaults:
  run:
    working-directory: metabrainz.docker

env:
  UV_SYSTEM_PYTHON: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: metabrainz.docker

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.4"
        run: |
          echo "::remove-matcher owner=python::"

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          uv tool install yamllint
          uv tool install ansible-lint

      - name: Run lint
        run: |
          yamllint .
          ansible-lint

  test:
    name: Test (py${{ matrix.python }} ansible${{ matrix.ansible }} ${{ matrix.distro }})
    runs-on: ubuntu-latest
    needs:
      - lint
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    strategy:
      matrix:
        python:
          - "3.12"
          - "3.13"
        ansible:
          - 10
          - 11
        distro:
          - ubuntu2004
          - ubuntu2204
          - ubuntu2404
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: metabrainz.docker

      - name: Generate requirements.txt
        run: |
          cat <<EOF > requirements.txt
          ansible==${{ matrix.ansible }}.*
          docker
          molecule-plugins[docker]
          EOF
          echo "REQS_HASH=$(sha256sum requirements.txt | awk '{ print $1 }')" >> "$GITHUB_ENV"

      - name: Install uv and set Python version
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.4"
          python-version: ${{ matrix.python }}

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
            uv-${{ runner.os }}

      - name: Install test dependencies
        run: uv pip install -r requirements.txt

      - name: Run pip freeze
        run: uv pip freeze

      - name: Run tests
        run: molecule test
        env:
          ANSIBLE_FORCE_COLOR: 1
          PY_COLORS: 1
          MOLECULE_DISTRO: ${{ matrix.distro }}

      - name: Minimize uv cache
        run: uv cache prune --ci
